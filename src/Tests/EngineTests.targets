<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" InitialTargets="_CheckPrerequisites" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <NuGetPath Condition=" '$(NuGetPath)' == '' ">$(MSBuildThisFileDirectory).nuget</NuGetPath>
    <!-- NOTE: we default to the folder where nuget itself is, '.nuget' 
         rather than 'packages' to avoid confusing NuGet in case a build-time 
         package is also used in projects in a solution, and the packages 
         folder happens to also be alongside this build script. In such case, 
         NuGet can't distinguish an unversioned installation from a 
         versioned one, and would therefore result in broken references 
         from projects inside VS/XS since they always install packages 
         in versioned folders.
         
         In addition, .nuget folder is usually already ignored in scc repos.
    -->
    <PackagesPath Condition=" '$(PackagesPath)' == '' ">$(NuGetPath)</PackagesPath>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      CoreBuild
    </BuildDependsOn>
  </PropertyGroup>
  
  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <Target Name="CoreBuild">
    <Message Text="CoreBuild!" Importance="high" />
  </Target>
  
  <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
    <NuGet Condition=" '$(NuGet)' == '' ">$(NuGetPath)\NuGet.exe</NuGet>
    <CachedNuGet Condition=" '$(CachedNuGet)' == '' ">$(LocalAppData)\NuGet\NuGet.exe</CachedNuGet>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(OS)' != 'Windows_NT' ">
    <NuGet>nuget</NuGet>
  </PropertyGroup>

  <PropertyGroup>
    <_CanIntrospect Condition=" Exists('$(PackagesPath)\MSBuilder.Introspect\build\MSBuilder.Introspect.dll') ">true</_CanIntrospect>
    <_CheckPrerequisitesDependsOn Condition=" Exists('packages.config') ">
      _GetNuGet;
      _DetectMissingPackages;
      _InstallMissingPackages;
      _RestartBuild
    </_CheckPrerequisitesDependsOn>
    <_RestartBuildDependsOn />
    <!--<_CheckPrerequisitesDependsOn Condition=" '$(_CanIntrospect)' == 'true' ">
      $(_CheckPrerequisitesDependsOn);
      _RestartBuild
    </_CheckPrerequisitesDependsOn>-->
  </PropertyGroup>
  
  <Target Name="_CheckPrerequisites" DependsOnTargets="$(_CheckPrerequisitesDependsOn)">

    <!--<CallTarget Targets="_RestartBuild" Condition=" '@(MissingPackage)' != '' " />-->
    
  </Target>

  <Target Name="_DetectMissingPackages" Condition=" Exists('packages.config') ">
    <XmlPeek XmlInputPath="packages.config" Query="/packages/package/@id">
      <Output TaskParameter="Result" ItemName="PackageId" />
    </XmlPeek>

    <ItemGroup>
      <MissingPackage Include="@(PackageId)" Condition=" !Exists('$(PackagesPath)\%(PackageId.Identity)') " />
    </ItemGroup>

    <Message Importance="normal" Text="All build-time packages are already installed."
             Condition=" '@(MissingPackage)' != '' " />

    <Message Importance="high" Text="Build-time packages were missing: @(MissingPackage)."
             Condition=" '@(MissingPackage)' != '' " />
  </Target>

  <Target Name="_InstallMissingPackages" Condition=" '@(MissingPackage)' != '' ">
    <MakeDir Directories="$(PackagesPath)" Condition=" !Exists($(PackagesPath)) " />
    <Exec Command="&quot;$(NuGet)&quot; Install packages.config -OutputDirectory $(PackagesPath) -ExcludeVersion"
          Condition=" Exists('packages.config') " />

    <PropertyGroup>
      <!-- Since we did install missing packages, we need to schedule a restart of the build -->
      <_RestartBuildDependsOn>
        $(_RestartBuildDependsOn);
        _IntrospectAndRestartBuild
      </_RestartBuildDependsOn>
    </PropertyGroup>
  </Target>

  <Target Name="_RestartBuild" DependsOnTargets="$(_RestartBuildDependsOn)" />
  
  <Target Name="_IntrospectAndRestartBuild">
    <PropertyGroup>
      <!-- Clear BuildDependsOn so that CoreBuild isn't run in the currently executing build -->
      <BuildDependsOn />
      <BuildProject>$(MSBuildProjectFullPath)</BuildProject>
    </PropertyGroup>

    <!-- Regardless of it being in packages.config, we need MSBuilder.Introspect to re-run ourselves if restoring was necessary -->
    <Exec Command="&quot;$(NuGet)&quot; Install MSBuilder.Introspect -OutputDirectory $(PackagesPath) -ExcludeVersion"
          Condition=" '$(CanIntrospect)' != 'true' " />

    <Introspect>
      <Output TaskParameter="Targets" ItemName="CurrentTargets" />
    </Introspect>

    <Message Importance="high" Text="Rebuilding targets: @(CurrentTargets)"  Condition=" '@(CurrentTargets)' != '' " />

    <MSBuild Projects="$(BuildProject)" Targets="@(CurrentTargets)" Condition=" '@(CurrentTargets)' != '' " />
  </Target>
  
  <!-- If there aren't any packages to restore or nuspecs to build, we do nothing. -->
  <Target Name="_GetNuGet" Condition=" Exists('packages.config') And '$(OS)' == 'Windows_NT' And !Exists('$(NuGet)') ">
    <PropertyGroup>
      <PowerShell Condition=" '$(PowerShell)' == '' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShell>
    </PropertyGroup>

    <MakeDir Directories="$(NuGetPath)" Condition=" !Exists($(NuGetPath)) " />
    <Exec Command="&quot;$(PowerShell)&quot; -Command &quot;&amp; { (New-Object System.Net.WebClient).DownloadFile('http://nuget.org/nuget.exe', '$(CachedNuGet)') }&quot;"
          Condition=" !Exists($(NuGet)) And !Exists($(CachedNuGet)) " />
    <Copy SourceFiles="$(CachedNuGet)" DestinationFolder="$(NuGetPath)" Condition="!Exists($(NuGet))" />
  </Target>

  <UsingTask TaskName="Introspect" 
             AssemblyFile="$(PackagesPath)\MSBuilder.Introspect\build\MSBuilder.Introspect.dll" 
             Condition="Exists('$(PackagesPath)\MSBuilder.Introspect\build\MSBuilder.Introspect.dll')" />

</Project>