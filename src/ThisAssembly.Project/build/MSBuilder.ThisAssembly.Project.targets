<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2015 Mobile Essentials

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- You can customize the namespace of the ThisAssembly class by setting the ThisAssemblyNamespace property. -->
	<PropertyGroup Condition="'$(Language)' == 'C#' Or '$(Language)' == 'VB'">
		<CoreCompileDependsOn>
			ThisProjectInfo;
			$(CoreCompileDependsOn)
		</CoreCompileDependsOn>
		<ThisProjectInfoFile>$(IntermediateOutputPath)ThisAssembly.Project.g$(DefaultLanguageSourceExtension)</ThisProjectInfoFile>
		<ThisProjectPropertiesFile>$(IntermediateOutputPath)ThisAssembly.ProjectProperties.g$(DefaultLanguageSourceExtension)</ThisProjectPropertiesFile>
		<ProjectGuidString Condition="'$(ProjectGuidString)' == ''">$([System.Guid]::Parse($(ProjectGuid)).ToString())</ProjectGuidString>
	</PropertyGroup>

	<Target Name="ThisProjectInfo" DependsOnTargets="_GenerateProjectInfo;_IntrospectProjectProperties;_GenerateProjectProperties"
			BeforeTargets="BuildOnlySettings"
			Condition="'$(Language)' == 'C#' Or '$(Language)' == 'VB'">
		<ItemGroup>
			<Compile Include="$(ThisProjectInfoFile)" />
			<_GeneratedCodeFiles Include="$(ThisProjectInfoFile)" />
		</ItemGroup>
		<ItemGroup Condition="'@(ThisAssemblyProjectProperty)' != ''">
			<Compile Include="$(ThisProjectPropertiesFile)" />
			<_GeneratedCodeFiles Include="$(ThisProjectPropertiesFile)" />
		</ItemGroup>
	</Target>

	<Target Name="_GenerateProjectInfo"
			Condition="'$(Language)' == 'C#' Or '$(Language)' == 'VB'"
			Inputs="$(MSBuildAllProjects)"
			Outputs="$(ThisProjectInfoFile)">

		<PropertyGroup>
			<_ThisProjectInfoContent>$([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)MSBuilder.ThisAssembly.Project$(DefaultLanguageSourceExtension).pp'))</_ThisProjectInfoContent>

			<!-- The $NamespaceDefine$ replacement is turned into the GLOBALNAMESPACE define if the ThisAssemblyNamespace isn't empty.  -->
			<_ThisProjectInfoContent Condition="'$(ThisAssemblyNamespace)' != ''">$(_ThisProjectInfoContent.Replace('$NamespaceDefine$', 'LOCALNAMESPACE'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent Condition="'$(ThisAssemblyNamespace)' == ''">$(_ThisProjectInfoContent.Replace('$NamespaceDefine$', 'GLOBALNAMESPACE'))</_ThisProjectInfoContent>

			<_ThisProjectInfoContent Condition="'$(ThisAssemblyNamespace)' != ''">$(_ThisProjectInfoContent.Replace('RootNamespace.', '$(ThisAssemblyNamespace).'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent Condition="'$(ThisAssemblyNamespace)' == ''">$(_ThisProjectInfoContent.Replace('RootNamespace.', ''))</_ThisProjectInfoContent>

			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('_RootNamespace_', '$(ThisAssemblyNamespace)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$RootNamespace$', '$(RootNamespace)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$AssemblyName$', '$(AssemblyName)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$ProjectGuid$', '$(ProjectGuid)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$TargetFrameworkVersion$', '$(TargetFrameworkVersion)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$TargetFrameworkIdentifier$', '$(TargetFrameworkIdentifier)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$TargetFrameworkMoniker$', '$(TargetFrameworkMoniker)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$TargetPlatformVersion$', '$(TargetPlatformVersion)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$TargetPlatformIdentifier$', '$(TargetPlatformIdentifier)'))</_ThisProjectInfoContent>
			<_ThisProjectInfoContent>$(_ThisProjectInfoContent.Replace('$TargetPlatformMoniker$', '$(TargetPlatformMoniker)'))</_ThisProjectInfoContent>
		</PropertyGroup>

		<PropertyGroup>
			<ThisProjectInfoDir>$([System.IO.Path]::GetDirectoryName('$(ThisProjectInfoFile)'))</ThisProjectInfoDir>
		</PropertyGroup>
		<MakeDir Directories="$(ThisProjectInfoDir)" Condition="!Exists('$(ThisProjectInfoDir)')" />

		<WriteLinesToFile File="$(ThisProjectInfoFile)" Lines="$(_ThisProjectInfoContent)" Overwrite="true" />

		<!-- Denotes xbuild, which doesn't properly handle escaped semicolon %3B -->
		<Exec Condition="'$(MSBuildRuntimeVersion)' == ''"
						Command="sed -i '' 's/\(.*\)&quot;/\1&quot;;/' '$(ThisProjectInfoFile)'" />
		<!-- Remove potential double semi-colon we might have added -->
		<Exec Condition="'$(MSBuildRuntimeVersion)' == ''"
						Command="sed -i '' 's/\(.*\)&quot;;;/\1&quot;;/' '$(ThisProjectInfoFile)'" />

		<ItemGroup>
			<FileWrites Include="$(ThisProjectInfoFile)" />
		</ItemGroup>

	</Target>

	<Target Name="_IntrospectProjectProperties" Condition="'@(ThisAssemblyProjectProperty)' != ''">
		<Introspect>
			<Output TaskParameter="Properties" ItemName="ProjectProperties" />
		</Introspect>
	</Target>
	
	<Target Name="_GenerateProjectProperties" Condition="'@(ThisAssemblyProjectProperty)' != ''" DependsOnTargets="_GenerateCSharpProjectProperties" />

	<Target Name="_GenerateCSharpProjectProperties" Condition="'$(Language)' == 'C#'" 
			DependsOnTargets="_WriteCSharpProjectBegin;_WriteCSharpProjectProperties;_WriteCSharpProjectEnd" />

	<Target Name="_WriteCSharpProjectBegin">

		<PropertyGroup>
			<NoNamespace Condition="'$(ThisAssemblyNamespace)' == ''">true</NoNamespace>
			<NoNamespace Condition="'$(ThisAssemblyNamespace)' != ''">false</NoNamespace>
		</PropertyGroup>

		<!-- Write namespace -->
		<WriteLinesToFile Condition="'$(NoNamespace)' == 'false'" Lines='
namespace $(ThisAssemblyNamespace)
{
' Overwrite='true' File='$(ThisProjectPropertiesFile)' />

		<!-- Write partial classes -->
		<WriteLinesToFile Lines='
	partial class ThisAssembly
	{
		public static partial class Project
		{
			public static partial class Properties
			{
' Overwrite='$(NoNamespace)' File='$(ThisProjectPropertiesFile)' />

	</Target>

	<Target Name="_WriteCSharpProjectProperties" Inputs="@(ThisAssemblyProjectProperty)" Outputs="%(ThisAssemblyProjectProperty.Identity)-BATCH">
		<PropertyGroup>
			<PropertyName>%(ThisAssemblyProjectProperty.Identity)</PropertyName>
			<PropertyValue>@(ProjectProperties -> Metadata('$(PropertyName)'))</PropertyValue>
		</PropertyGroup>
		<!-- Write property -->
		<WriteLinesToFile Lines='				  
				/// &lt;summary&gt;$(PropertyName)=$(PropertyValue)&lt;/summary&gt;
				public const string $(PropertyName) = "$(PropertyValue)"%3B
' Overwrite='false' File='$(ThisProjectPropertiesFile)' />
	</Target>

	<Target Name="_WriteCSharpProjectEnd">
		<!-- Close partial classes -->
		<WriteLinesToFile Lines='
			}
		}
	}
' Overwrite='false' File='$(ThisProjectPropertiesFile)' />

		<!-- Close namespace -->
		<WriteLinesToFile Condition="'$(NoNamespace)' == 'false'" Lines='
}
' Overwrite='false' File='$(ThisProjectPropertiesFile)' />

	</Target>

</Project>