<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2015 Daniel Cazzulino

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
		<TrackFileAccess>false</TrackFileAccess>
		<VersionFormat Condition="'$(VersionFormat)' == ''">MAJOR.MINOR.PATCH</VersionFormat>
	</PropertyGroup>

	<ItemGroup>
		<!-- To build a single solution or project, just pass it as a property $(Solution) or $(Project) -->
		
		<!-- Solutions at the root of the src directory are all built automatically unless overriden -->
		<Solution Include="src\*.sln" Condition="'$(Solution)' == ''">
			<AdditionalProperties>Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)</AdditionalProperties>
		</Solution>
		
		<Solution Include="$(Solution)" Condition="'$(Solution)' != ''">
			<AdditionalProperties>Configuration=$(Configuration);TrackFileAccess=$(TrackFileAccess)</AdditionalProperties>
		</Solution>
		
		<NuGet Include="**\*.nuspec" />
	</ItemGroup>
	
	<Import Project="build\build.targets" />

	<PropertyGroup>
		<!-- We overwrite the prop since we don't want FormatVersion at all -->
		<BuildPackagesDependsOn>
			$(BuildPackagesDependsOn);
			GetHeadSha;
			CalculatePackageVersions;
			RemoveUnchangedPackages;
		</BuildPackagesDependsOn>
	</PropertyGroup>

	<Target Name="RemoveUnchangedPackages">

		<ItemGroup>
			<NuGet Remove="@(NuGet)" Condition="%(Commits) == '0' And %(IsHead) != 'true'" />
		</ItemGroup>
		
		<Message Text="NuGet=%(NuGet.Identity), Version=%(NuGet.Version), Commits=%(NuGet.Commits)" Importance="high" />
	</Target>

	<Target Name="GetHeadSha">

		<Run Exe="$(GitExe)" Args="rev-parse HEAD" WorkingDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="Output" PropertyName="HeadSha" />
		</Run>

	</Target>
	
	<Target Name="CalculatePackageVersions" Inputs="@(NuGet)" Outputs="%(NuGet.Identity)-BATCH">

		<PropertyGroup>
			<NuSpec>%(NuGet.Identity)</NuSpec>
		</PropertyGroup>

		<Run Exe='$(GitExe)'
			 Args='log -n 1 --pretty=format:%H "$(NuSpec)"'
			 WorkingDir='$(MSBuildProjectDirectory)'>
			<Output TaskParameter="Output" PropertyName="NuSpecSha" />
		</Run>

		<Run Exe='$(GitExe)'
			 Args='rev-list --count "$(NuSpecSha)"..HEAD $([System.IO.Path]::GetDirectoryName("$(NuSpec)"))'
			 WorkingDir='$(MSBuildProjectDirectory)'>
			<Output TaskParameter="Output" PropertyName="NuSpecCommits" />
		</Run>

		<XmlPeek XmlInputPath="$(NuSpec)"
				 Query="/package/metadata/version/text()">
			<Output TaskParameter="Result" PropertyName="NuSpecVersion" />
		</XmlPeek>

		<IncrementVersion Version="$(NuSpecVersion)" Commits="$(NuSpecCommits)">
			<Output TaskParameter="Result" PropertyName="NuSpecVersion" />
		</IncrementVersion>

		<PropertyGroup>
			<IsHead Condition="$(NuSpecSha) == $(HeadSha)">true</IsHead>
			<IsHead Condition="$(NuSpecSha) != $(HeadSha)">false</IsHead>
		</PropertyGroup>
		
		<ItemGroup>
			<NuGet>
				<IsHead>$(IsHead)</IsHead>
				<Commits>$(NuSpecCommits)</Commits>
				<Version>$(NuSpecVersion)</Version>
			</NuGet>
		</ItemGroup>

	</Target>

	<!--
    ============================================================
              GitExe Property
	
	Cascading probing mechanism will try to locate an installed 
	version of git, msysgit or cygwin git.
	============================================================
	-->
	<PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
		<!-- We probe multiple places, with the first matching one winning -->
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\Program Files\Git\bin\git.exe')">C:\Program Files\Git\bin\git.exe</GitExe>
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\Program Files (x86)\Git\bin\git.exe')">C:\Program Files (x86)\Git\bin\git.exe</GitExe>
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\msysgit\bin\git.exe')">C:\msysgit\bin\git.exe</GitExe>
		<GitExe Condition="'$(GitExe)' == '' And Exists('C:\cygwin\bin\git.exe')">C:\cygwin\bin\git.exe</GitExe>
		<!-- Ultimately, just try the exe and hope it exists in the PATH already -->
		<GitExe Condition="'$(GitExe)' == ''">git.exe</GitExe>
	</PropertyGroup>
	<PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
		<GitExe>git</GitExe>
	</PropertyGroup>

	<UsingTask TaskName="Run" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskAssembly)">

		<ParameterGroup>
			<Exe Required="true"/>
			<Args Required="false"/>
			<WorkingDir Required="true"/>
			<Output Output="true"/>
		</ParameterGroup>

		<Task>
			<Using Namespace="System.Diagnostics"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
			var psi = new ProcessStartInfo
			{
				CreateNoWindow = true,
				UseShellExecute = false,
				RedirectStandardOutput = true,
				RedirectStandardError = true,
				WorkingDirectory = WorkingDir,
				FileName = Exe,
				Arguments = Args
			};

			Log.LogMessage(MessageImportance.Low, "Executing: {0} {1}", Exe, Args);

			var p = Process.Start(psi);
			Output = p.StandardOutput.ReadToEnd().Trim();
			Log.LogMessage(MessageImportance.Low, Output);

			var errors = p.StandardError.ReadToEnd().Trim();
			if (errors.Length > 0)
			{
				Log.LogError(errors);
				return false;
			}
]]>
			</Code>
		</Task>

	</UsingTask>

	<UsingTask TaskName="IncrementVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskAssembly)">

		<ParameterGroup>
			<Version Required="true"/>
			<Commits Required="false" ParameterType="System.Int32" />
			<Result Output="true"/>
		</ParameterGroup>

		<Task>
			<Using Namespace="System.Diagnostics"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				var version = new Version(Version);
				Result = new Version(version.Major, version.Minor, (version.Build != -1 ? version.Build : 0) + Commits).ToString();
]]>
			</Code>
		</Task>

	</UsingTask>

</Project>